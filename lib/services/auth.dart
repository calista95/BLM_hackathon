///File description: This contains the methods for authenticating user,
///including log in, sign up, and log out.
import 'package:firebase_auth/firebase_auth.dart';
import 'package:blmhackathon/services/database.dart';
import 'package:blmhackathon/models/user.dart';

class AuthService{
  final FirebaseAuth _auth = FirebaseAuth.instance; ///this is a property that gets us an instance

  ///create user object based on FirebaseUser and the uid in it
  User _userFromFirebaseUser(FirebaseUser user){
    return user != null ? User(uid: user.uid) : null;
  }

  Stream<User> get user {
    return _auth.onAuthStateChanged.map(_userFromFirebaseUser);
  } ///returns a null value if user signs out and an object if user signs in

  ///sign in with email and password
  Future signInWithEmailAndPassword(String email, String password) async {
    try{
      AuthResult result = await _auth.signInWithEmailAndPassword(email: email, password: password);
      ///grab the user from that result
      FirebaseUser user = result.user;
      return _userFromFirebaseUser(user); ///this is the method that we defined above
    }catch(e){
      print(e.toString());
      return null;
    }
  }

  ///register with email and password
  Future registerWithEmailAndPassword(String email, String password, String name) async {
    try{
      AuthResult result = await _auth.createUserWithEmailAndPassword(email: email, password: password);
      ///grab the user from that result
      FirebaseUser user = result.user;
      ///create a new document for this new user using the autogenerated ID
      await DatabaseService(uid: user.uid).createUserDocument(name);
      return _userFromFirebaseUser(user); ///this is the method that we defined above
    }catch(e){
      return null;
    }
  }

  ///sign out
  Future signOut() async {
    try{
      return await _auth.signOut();
    }
    catch(e){
      return null;
    }
  }
}



